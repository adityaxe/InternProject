{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red155\green35\blue147;
\red108\green54\blue169;\red57\green0\blue160;\red196\green26\blue22;\red15\green104\blue160;\red50\green109\blue116;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c60759\c13753\c57628;
\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c19418\c42935\c45455;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\fs24 \cf2 \cb3 \
\

\f1\b \cf4 import
\f0\b0 \cf2  SwiftUI\

\f1\b \cf4 import
\f0\b0 \cf2  DuckDB\
\

\f1\b \cf4 func
\f0\b0 \cf2  importCSVToDuckDB(\\intern\\\cf5 data\cf2 .csv: \cf6 String\cf2 ) \{\
    
\f1\b \cf4 let
\f0\b0 \cf2  db = 
\f1\b \cf4 try
\f0\b0 \cf2 ! DuckDBDatabase()\
    
\f1\b \cf4 let
\f0\b0 \cf2  query = \cf7 "CREATE TABLE accidents AS SELECT * FROM read_csv_auto('\\intern\\data.csv');"\cf2 \
    
\f1\b \cf4 try
\f0\b0 \cf2 ! db.\cf5 query\cf2 (query)\
    \
    
\f1\b \cf4 func
\f0\b0 \cf2  \cf8 fetchData\cf2 () -> [[\cf6 String\cf2 ]] \{\
        
\f1\b \cf4 let
\f0\b0 \cf2  db = 
\f1\b \cf4 try
\f0\b0 \cf2 ! DuckDBDatabase()\
        
\f1\b \cf4 let
\f0\b0 \cf2  result = 
\f1\b \cf4 try
\f0\b0 \cf2 ! db.\cf5 query\cf2 (\cf7 "SELECT * FROM accidents"\cf2 )\
        \
        
\f1\b \cf4 var
\f0\b0 \cf2  data: [[\cf6 String\cf2 ]] = []\
        
\f1\b \cf4 for
\f0\b0 \cf2  row 
\f1\b \cf4 in
\f0\b0 \cf2  result \{\
            
\f1\b \cf4 var
\f0\b0 \cf2  rowData: [\cf6 String\cf2 ] = []\
            
\f1\b \cf4 for
\f0\b0 \cf2  column 
\f1\b \cf4 in
\f0\b0 \cf2  row \{\
                rowData.\cf5 append\cf2 (\cf7 "\cf2 \\(column)\cf7 "\cf2 )\
            \}\
            data.\cf5 append\cf2 (rowData)\
        \}\
        
\f1\b \cf4 return
\f0\b0 \cf2  data\
    \}\
    
\f1\b \cf4 func
\f0\b0 \cf2  \cf8 fetchData\cf2 (\cf8 offset\cf2 : \cf6 Int\cf2 , \cf8 limit\cf2 : \cf6 Int\cf2 ) -> [[\cf6 String\cf2 ]] \{\
        
\f1\b \cf4 let
\f0\b0 \cf2  db = 
\f1\b \cf4 try
\f0\b0 \cf2 ! DuckDBDatabase()\
        
\f1\b \cf4 let
\f0\b0 \cf2  query = \cf7 "SELECT * FROM accidents LIMIT \cf2 \\(limit)\cf7  OFFSET \cf2 \\(offset)\cf7 ;"\cf2 \
        
\f1\b \cf4 let
\f0\b0 \cf2  result = 
\f1\b \cf4 try
\f0\b0 \cf2 ! db.\cf5 query\cf2 (query)\
        \
        
\f1\b \cf4 var
\f0\b0 \cf2  data: [[\cf6 String\cf2 ]] = []\
        
\f1\b \cf4 for
\f0\b0 \cf2  row 
\f1\b \cf4 in
\f0\b0 \cf2  result \{\
            
\f1\b \cf4 var
\f0\b0 \cf2  rowData: [\cf6 String\cf2 ] = []\
            
\f1\b \cf4 for
\f0\b0 \cf2  column 
\f1\b \cf4 in
\f0\b0 \cf2  row \{\
                rowData.\cf5 append\cf2 (\cf7 "\cf2 \\(column)\cf7 "\cf2 )\
            \}\
            data.\cf5 append\cf2 (rowData)\
        \}\
        
\f1\b \cf4 return
\f0\b0 \cf2  data\
    \}\
    
\f1\b \cf4 let
\f0\b0 \cf2  searchBar = UISearchBar()\
    searchBar.\cf5 delegate\cf2  = 
\f1\b \cf4 self
\f0\b0 \cf2 \
    navigationItem.titleView = searchBar\
    \
    
\f1\b \cf4 func
\f0\b0 \cf2  \cf8 searchBar\cf2 (\cf8 _\cf2  searchBar: UISearchBar, \cf8 textDidChange\cf2  searchText: \cf6 String\cf2 ) \{\
        
\f1\b \cf4 if
\f0\b0 \cf2  searchText.\cf5 isEmpty\cf2  \{\
            \cf5 data\cf2  = \cf9 fetchData\cf2 ()\
        \} 
\f1\b \cf4 else
\f0\b0 \cf2  \{\
            \cf5 data\cf2  = \cf5 data\cf2 .\cf5 filter\cf2  \{ row 
\f1\b \cf4 in
\f0\b0 \cf2 \
                row.\cf5 contains\cf2 (\cf5 where\cf2 : \{ $0.\cf5 lowercased\cf2 ().\cf5 contains\cf2 (searchText.\cf5 lowercased\cf2 ()) \})\
            \}\
        \}\
        \cf5 tableView\cf2 .\cf5 reloadData\cf2 ()\
    \}\
\}\
\
\cf5 #Preview\cf2  \{\
    ContentView()\
\}\
}